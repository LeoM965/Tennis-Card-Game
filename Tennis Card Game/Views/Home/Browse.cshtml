@model BrowseCardsVM

@{
    ViewData["Title"] = "Browse Tennis Cards";
}

<div class="container mt-4">
    <h1 class="mb-4">Tennis Card Collection</h1>

    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-md-3">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Card Filters</h5>
                </div>
                <div class="card-body">
                    <form method="get" asp-action="Browse" id="filterForm">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Card Type</label>
                            <select class="form-select" name="name" asp-items="@(new SelectList(Model.Categories, Model.SelectedCategory))" id="categorySelect">
                                <option value="">All Types</option>
                            </select>
                            <small class="text-muted">Shot, Positioning, Strategy</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Sub Type</label>
                            <select class="form-select" name="subCategory" asp-items="@(new SelectList(Model.SubCategories, Model.SelectedSubCategory))" id="subCategorySelect">
                                <option value="">All Sub Types</option>
                            </select>
                            <small class="text-muted">Serve, Forehand, Backhand, etc.</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-bold">Surface</label>
                            <select class="form-select" name="surface" id="surfaceSelect">
                                <option value="">All Surfaces</option>
                                @foreach (var surface in Model.Surfaces)
                                {
                                    <option value="@surface.Id" selected="@(Model.SelectedSurface == surface.Id.ToString())">@surface.Name</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="wildCardCheck" name="isWildCard" value="true">
                                <label class="form-check-label" for="wildCardCheck">
                                    Wild Cards Only
                                </label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-success w-100">Apply Filters</button>
                        <button type="button" class="btn btn-outline-secondary w-100 mt-2" id="clearFilters">Clear Filters</button>
                    </form>
                </div>
            </div>

            <!-- Stat Ranges -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">Card Stats Filter</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="powerRange" class="form-label d-flex justify-content-between">
                            <span>Power</span>
                            <span id="powerValue">Any</span>
                        </label>
                        <input type="range" class="form-range" id="powerRange" min="0" max="100" value="0">
                    </div>
                    
                    <div class="mb-3">
                        <label for="precisionRange" class="form-label d-flex justify-content-between">
                            <span>Precision</span>
                            <span id="precisionValue">Any</span>
                        </label>
                        <input type="range" class="form-range" id="precisionRange" min="0" max="100" value="0">
                    </div>
                    
                    <div class="mb-3">
                        <label for="energyRange" class="form-label d-flex justify-content-between">
                            <span>Energy</span>
                            <span id="energyValue">Any</span>
                        </label>
                        <input type="range" class="form-range" id="energyRange" min="0" max="100" value="0">
                    </div>
                    
                    <button type="button" class="btn btn-info w-100" id="applyStatFilters">Apply Stat Filters</button>
                </div>
            </div>
        </div>

        <!-- Cards Grid -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <p class="mb-0"><strong>@Model.Cards.Count()</strong> cards found</p>
                <div class="d-flex">
                    <select class="form-select me-2" id="sortSelect">
                        <option value="name">Sort by Name</option>
                        <option value="power">Sort by Power</option>
                        <option value="precision">Sort by Precision</option>
                        <option value="energy">Sort by Energy Consumption</option>
                    </select>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-secondary active" id="gridView">
                            <i class="bi bi-grid-3x3-gap-fill"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="listView">
                            <i class="bi bi-list-ul"></i>
                        </button>
                    </div>
                </div>
            </div>

            @if (!Model.Cards.Any())
            {
                <div class="alert alert-info">
                    <h4 class="alert-heading">No tennis cards found!</h4>
                    <p>Try adjusting your filter criteria or browse our complete collection.</p>
                </div>
            }
            else
            {
                <div class="row row-cols-1 row-cols-md-3 g-4" id="cardsContainer">
                    @foreach (var card in Model.Cards)
                    {
                        <div class="col card-item" 
                             data-power="@card.Power" 
                             data-precision="@card.Precision" 
                             data-energy="@card.EnergyConsumption"
                             data-wild="@card.IsWildCard.ToString().ToLower()">
                            <div class="card h-100 shadow-sm @(card.IsWildCard ? "border-warning" : "")">
                                @if (card.IsWildCard)
                                {
                                    <div class="position-absolute top-0 end-0 p-2">
                                        <span class="badge bg-warning">WILD CARD</span>
                                    </div>
                                }
                                
                                <div class="card-body">
                                    <h5 class="card-title">@card.Name</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">@card.CardCategory.Name - @card.CardCategory.SubCategory</h6>
                                    
                                    <p class="card-text">@card.Description</p>
                                    
                                    <div class="mt-3">
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Power:</span>
                                            <div class="progress flex-grow-1 mx-2" style="height: 20px;">
                                                <div class="progress-bar bg-danger" role="progressbar" style="width: @(card.Power)%">@card.Power</div>
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Precision:</span>
                                            <div class="progress flex-grow-1 mx-2" style="height: 20px;">
                                                <div class="progress-bar bg-primary" role="progressbar" style="width: @(card.Precision)%">@card.Precision</div>
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Energy:</span>
                                            <div class="progress flex-grow-1 mx-2" style="height: 20px;">
                                                <div class="progress-bar bg-success" role="progressbar" style="width: @(card.EnergyConsumption)%">@card.EnergyConsumption</div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(card.SpecialEffect))
                                    {
                                        <div class="mt-3">
                                            <h6 class="text-danger">Special Effect:</h6>
                                            <p>@card.SpecialEffect</p>
                                        </div>
                                    }
                                    
                                    @if (card.ClayBonus > 0 || card.GrassBonus > 0 || card.HardCourtBonus > 0)
                                    {
                                        <div class="mt-3">
                                            <h6>Surface Bonuses:</h6>
                                            <div class="d-flex justify-content-between">
                                                @if (card.ClayBonus > 0)
                                                {
                                                    <span class="badge bg-danger">Clay +@card.ClayBonus</span>
                                                }
                                                @if (card.GrassBonus > 0)
                                                {
                                                    <span class="badge bg-success">Grass +@card.GrassBonus</span>
                                                }
                                                @if (card.HardCourtBonus > 0)
                                                {
                                                    <span class="badge bg-primary">Hard +@card.HardCourtBonus</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="card-footer">
                                    <a href="@Url.Action("Details", "Cards", new { id = card.Id })" class="btn btn-sm btn-primary w-100">View Card Details</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle filter changes
            $("#categorySelect, #subCategorySelect, #surfaceSelect").change(function() {
                // You can either auto-submit the form or wait for the Apply button
                // $("#filterForm").submit();
            });

            // Clear filters
            $("#clearFilters").click(function() {
                $("#categorySelect, #subCategorySelect, #surfaceSelect").val('');
                $("#wildCardCheck").prop('checked', false);
                $("#filterForm").submit();
            });

            // Handle grid/list view toggle
            $("#listView").click(function() {
                $(this).addClass('active');
                $("#gridView").removeClass('active');
                $("#cardsContainer").removeClass('row-cols-md-3').addClass('row-cols-md-1');
                $(".card").addClass('flex-row');
            });

            $("#gridView").click(function() {
                $(this).addClass('active');
                $("#listView").removeClass('active');
                $("#cardsContainer").removeClass('row-cols-md-1').addClass('row-cols-md-3');
                $(".card").removeClass('flex-row');
            });

            // Range sliders
            $("#powerRange").on("input", function() {
                var value = $(this).val();
                $("#powerValue").text(value > 0 ? value + "+" : "Any");
            });
            
            $("#precisionRange").on("input", function() {
                var value = $(this).val();
                $("#precisionValue").text(value > 0 ? value + "+" : "Any");
            });
            
            $("#energyRange").on("input", function() {
                var value = $(this).val();
                $("#energyValue").text(value > 0 ? value + "+" : "Any");
            });
            
            // Apply stat filters
            $("#applyStatFilters").click(function() {
                var minPower = parseInt($("#powerRange").val());
                var minPrecision = parseInt($("#precisionRange").val());
                var minEnergy = parseInt($("#energyRange").val());
                var isWildCard = $("#wildCardCheck").is(":checked");
                
                $(".card-item").each(function() {
                    var power = parseInt($(this).data("power"));
                    var precision = parseInt($(this).data("precision"));
                    var energy = parseInt($(this).data("energy"));
                    var wild = $(this).data("wild") === "true";
                    
                    var show = (power >= minPower || minPower === 0) && 
                               (precision >= minPrecision || minPrecision === 0) && 
                               (energy >= minEnergy || minEnergy === 0) &&
                               (!isWildCard || wild);
                    
                    $(this).toggle(show);
                });
                
                updateCardCount();
            });
            
            function updateCardCount() {
                var visibleCards = $(".card-item:visible").length;
                $("p strong").text(visibleCards);
            }

            // Handle sorting
            $("#sortSelect").change(function() {
                const sortBy = $(this).val();
                const $container = $("#cardsContainer");
                const $items = $container.children('.card-item').get();
                
                $items.sort(function(a, b) {
                    if (sortBy === 'name') {
                        return $(a).find('.card-title').text().localeCompare($(b).find('.card-title').text());
                    } else if (sortBy === 'power') {
                        return parseInt($(b).data('power')) - parseInt($(a).data('power'));
                    } else if (sortBy === 'precision') {
                        return parseInt($(b).data('precision')) - parseInt($(a).data('precision'));
                    } else if (sortBy === 'energy') {
                        return parseInt($(a).data('energy')) - parseInt($(b).data('energy'));
                    }
                    return 0;
                });
                
                $.each($items, function(i, item) {
                    $container.append(item);
                });
            });
        });
    </script>
}